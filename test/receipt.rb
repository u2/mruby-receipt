include RLP
include Ethereum

assert("test_receipt") do
  # gas_used bloom logs error account_nonce transaction_hash
  tx_hash = [230, 107, 198, 169, 247, 41, 26, 84, 177, 116, 141, 37, 138, 67, 87, 105, 216, 205, 120, 4, 144, 233, 212, 211, 21, 93, 140, 198, 158, 211, 171, 230].pack("C*")
  r = Receipt.new "134e33", "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000", [Log::new(address: "00000000000000000001", topics: [], data: "")], [], 1, tx_hash
  assert_equal "134e33", r.gas_used

  r_s = Receipt.serialize r

  # # deserialization
  dr = Receipt.deserialize r_s, {}

  assert_equal r, dr

  data = RLP.encode(r)

  # data2 = "\xF9\x01C\x83\x13N3\xB9\x01\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xD8\xD7\x9400000000000000000001\xC0\x80\xC0\x01\xA0\xE6k\xC6\xA9\xF7)\x1AT\xB1t\x8D%\x8ACWi\xD8\xCDx\x04\x90\xE9\xD4\xD3\x15]\x8C\xC6\x9E\xD3\xAB\xE6"

  x = RLP.decode(data, { sedes: Receipt })

  assert_equal r, x
end

assert("test_receipt2") do
  # https://github.com/cryptape/synapse/pull/58/files#diff-3a517d36dea2b4bd440c894f64803118R8
  data = "\xF9\x01C\x83\x13N3\xB9\x01\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xD8\xD7\x9400000000000000000001\xC0\x80\xC0\x01\xA0\xE6k\xC6\xA9\xF7)\x1AT\xB1t\x8D%\x8ACWi\xD8\xCDx\x04\x90\xE9\xD4\xD3\x15]\x8C\xC6\x9E\xD3\xAB\xE6"
  x = RLP.decode(data, { sedes: Receipt })

  assert_equal x.gas_used, "134e33"
  assert_equal x.bloom
  assert_equal x.transaction_hash, "\xe6k\xc6\xa9\xf7)\x1aT\xb1t\x8d%\x8aCWi\xd8\xcdx\x04\x90\xe9\xd4\xd3\x15]\x8c\xc6\x9e\xd3\xab\xe6"
end

assert("test3") do
  # https://github.com/cryptape/synapse/pull/58/files#diff-3a517d36dea2b4bd440c894f64803118R31
  v = [249, 1, 43, 131, 19, 78, 51, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 192, 128, 160, 230, 107, 198, 169, 247, 41, 26, 84, 177, 116, 141, 37, 138, 67, 87, 105, 216, 205, 120, 4, 144, 233, 212, 211, 21, 93, 140, 198, 158, 211, 171, 230]
  data = v.pack('C*')
  # {"transactionHash":"0xe66bc6a9f7291a54b1748d258a435769d8cd780490e9d4d3155d8cc69ed3abe6","transactionIndex":"0x0","blockHash":"0xb11e1de143e2a7bd543059da1ec4b417f8d2a2dfdf66901d812283fc0b68b0b6","blockNumber":"0x81","cumulativeQuotaUsed":"0x134e33","quotaUsed":"0x134e33","contractAddress":"0xad54ae137c6c39fa413fa1da7db6463e3ae45664","logs":[],"root":null,"logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","errorMessage":null}
  # account_nonce: 0x0, transaction_hash: 0xe66bc6a9f7291a54b1748d258a435769d8cd780490e9d4d3155d8cc69ed3abe6
  # tx_hash_rlp: [160, 230, 107, 198, 169, 247, 41, 26, 84, 177, 116, 141, 37, 138, 67, 87, 105, 216, 205, 120, 4, 144, 233, 212, 211, 21, 93, 140, 198, 158, 211, 171, 230]
  tx_hash = [230, 107, 198, 169, 247, 41, 26, 84, 177, 116, 141, 37, 138, 67, 87, 105, 216, 205, 120, 4, 144, 233, 212, 211, 21, 93, 140, 198, 158, 211, 171, 230].pack("C*")    
  x = RLP.decode(data, sedes: Receipt)

  assert_equal x.bloom
  assert_equal x.gas_used, "134e33"
  assert_equal x.transaction_hash, tx_hash
  assert_equal x.error, []
  assert_equal x.logs, []
  assert_equal x.account_nonce, ""
end
